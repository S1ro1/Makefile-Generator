print_help ()
{
    echo 'A simple makefile generator by Siro'
    echo "Usage:"
    echo -e "\t-h: Prints help"
    echo -e "\t-c [OPTION]: sets a compiler to the option"
    echo -e "\t-t [OPTION]: sets a target name for the executable to be created"
    echo -e "\t-*: Everything else preceeded by dash becomes a compiler flags, default ones are -std=c99 -Wall -Wextra"
}

generate () 
{
    touch makefile
    DEFAULT_FLAGS="-std=c99 -Wall -Wextra"
    FLAGS=""
    DEFAULT_COMPILER="gcc"
    COMPILER=""
    OBJECT_FILES=""
    STRIPPED_FILE=""
    SUFFIXED_FILE=""
    while [ "$#" -gt 0 ]; do
        case "$1" in
        -h)
            print_help
            shift
            ;;
        -c)
            COMPILER="$2"
            shift
            shift
            ;;
        -t)
            FILE_NAME="$2"
            shift
            shift
            ;;
        -*)
            FLAGS="$FLAGS $1"
            shift
            ;;
        #*.o)
            #OBJECT_FILES="$OBJECT_FILES $1"
            #shift
            #;;
        *)
            print_help
            return
            ;;
        esac
    done

    if [ -z "$FILE_NAME" ]; then
        echo "No target provided"
        return
    fi
    
    if [ "$FLAGS" ]; then
        DEFAULT_FLAGS=$FLAGS
    fi

    if [ "$COMPILER" ]; then
        DEFAULT_COMPILER=$COMPILER
    fi

    if [ -z "$OBJECT_FILES" ]; then
        for file in "$PWD"/*; do
            if [[ $file == *.c ]]; then
                STRIPPED_FILE="${file%.c}"
                SUFFIXED_FILE="$STRIPPED_FILE.o"
                OBJECT_FILES="$OBJECT_FILES ${SUFFIXED_FILE##*/}"
            fi
        done
    fi
    
    echo "CC=$DEFAULT_COMPILER" > makefile
    echo -e "CFLAGS=$DEFAULT_FLAGS\n" >> makefile
    echo -e "OBJS=$OBJECT_FILES" >> makefile
    echo -e "TARGET=$FILE_NAME\n" >> makefile

    echo -e "%.o: %.c" >> makefile
    echo -e "\t\$(CC) \$(CFLAGS) -c \$^ -o \$@\n" >> makefile

    echo -e "\$(TARGET): \$(OBJS)" >> makefile
    echo -e "\t\$(CC) -o \$@ \$(OBJS) \$(LDFLAGS)\n" >> makefile

    echo -e "clean:" >> makefile
    echo -e "\t rm \$(OBJS) \$(TARGET)\n" >> makefile

    echo -e "-include \$(OBJS:.o=.d)" >> makefile

}
